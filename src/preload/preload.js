const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('api', {
  getInstallInfo: () => ipcRenderer.invoke('get-install-info'),
  // ====== قنوات عملاء الديون (debt customers) ======
  debtCustomerAdd: (data) => ipcRenderer.invoke('debt-customer-add', data),
  debtCustomersList: () => ipcRenderer.invoke('debt-customers-list'),
  // (تم حذف تحديث/حذف عميل مؤقت في النظام الجديد المبسط)
  setEdition: (edition) => ipcRenderer.invoke('set-edition', edition),
  activateApp: (code) => ipcRenderer.invoke('activate-app', code),
  maximize: () => ipcRenderer.send('app-maximize'),
  exitApp: () => ipcRenderer.send('app-exit'),
  authLogin: (username, password) => ipcRenderer.invoke('auth-login', { username, password }),
  listUsers: () => ipcRenderer.invoke('users-list'),
  rolesList: () => ipcRenderer.invoke('roles-list'),
  roleAdd: (name, permissions) => ipcRenderer.invoke('role-add', { name, permissions }),
  roleUpdate: (id, data) => ipcRenderer.invoke('role-update', { id, ...data }),
  userAdd: (data) => ipcRenderer.invoke('user-add', data),
  userUpdate: (id, data) => ipcRenderer.invoke('user-update', { id, ...data }),
  userDelete: (id) => ipcRenderer.invoke('user-delete', id),
  productsList: (filter) => ipcRenderer.invoke('products-list', filter),
  productAdd: (data) => ipcRenderer.invoke('product-add', data),
  productUpdate: (id,data) => ipcRenderer.invoke('product-update', id, data),
  productDelete: (id) => ipcRenderer.invoke('product-delete', id),
  customersList: (filter) => ipcRenderer.invoke('customers-list', filter),
  customerAdd: (data) => ipcRenderer.invoke('customer-add', data),
  customerUpdate: (id,data) => ipcRenderer.invoke('customer-update', id, data),
  customerDelete: (id) => ipcRenderer.invoke('customer-delete', id),
  suppliersList: (filter) => ipcRenderer.invoke('suppliers-list', filter),
  supplierAdd: (data) => ipcRenderer.invoke('supplier-add', data),
  supplierUpdate: (id,data) => ipcRenderer.invoke('supplier-update', id, data),
  supplierDelete: (id) => ipcRenderer.invoke('supplier-delete', id),
  storesAdvList: (filter) => ipcRenderer.invoke('stores-adv-list', filter),
  storeAddAdv: (data) => ipcRenderer.invoke('store-add-adv', data),
  storeUpdateAdv: (id,data) => ipcRenderer.invoke('store-update-adv', id, data),
  storeDeleteAdv: (id) => ipcRenderer.invoke('store-delete-adv', id),
  lowStockList: (storeId) => ipcRenderer.invoke('lowstock-list', storeId),
  stockTransfer: (payload) => ipcRenderer.invoke('stock-transfer', payload),
  auditLogList: (limit) => ipcRenderer.invoke('audit-log-list', limit),
  // التقارير
  reportSalesSummary: (period) => ipcRenderer.invoke('report-sales-summary', period),
  reportSalesDetails: (period, search) => ipcRenderer.invoke('report-sales-details', period, search),
  reportProfitSummary: (period) => ipcRenderer.invoke('report-profit-summary', period),
  reportProfitProducts: (period) => ipcRenderer.invoke('report-profit-products', period),
  // واجهة أسماء مبسطة حسب الطلب
  listStores: (filter) => ipcRenderer.invoke('stores-adv-list', filter),
  addStore: (data) => ipcRenderer.invoke('store-add-adv', data),
  updateStore: (id,data) => ipcRenderer.invoke('store-update-adv', id, data),
  deleteStore: (id) => ipcRenderer.invoke('store-delete-adv', id),
  saleCreate: (data) => ipcRenderer.invoke('sale-create', data)
  , saleUpdate: (id,data) => ipcRenderer.invoke('sale-update', id, data)
  , salesList: () => ipcRenderer.invoke('sales-list')
  , saleGet: (id) => ipcRenderer.invoke('sale-get', id)
  , saleGetByInvoice: (inv) => ipcRenderer.invoke('sale-get-by-invoice', inv)
  , invoiceNext: () => ipcRenderer.invoke('invoice-next')
  , saleReturnCreate: (data) => ipcRenderer.invoke('sale-return-create', data)
  , saleReturnsList: () => ipcRenderer.invoke('sale-returns-list')
  , saleReturnStats: (saleId) => ipcRenderer.invoke('sale-return-stats', saleId)
  , groupsList: () => ipcRenderer.invoke('product_groups-list')
  , groupEnsure: (name) => ipcRenderer.invoke('product_groups-ensure', name)
  , unitsList: () => ipcRenderer.invoke('product_units-list')
  , unitEnsure: (name) => ipcRenderer.invoke('product_units-ensure', name)
  , categoriesList: () => ipcRenderer.invoke('product_categories-list')
  , categoryEnsure: (name) => ipcRenderer.invoke('product_categories-ensure', name)
  , storesList: () => ipcRenderer.invoke('stores-list')
  , storeEnsure: (name) => ipcRenderer.invoke('stores-ensure', name)
  , settingSet: (key,value) => ipcRenderer.invoke('setting-set', key, value)
  , settingGet: (key) => ipcRenderer.invoke('setting-get', key)
  , settingsList: () => ipcRenderer.invoke('settings-list')
  , exportSalesCSV: () => ipcRenderer.invoke('export-sales-csv')
  , exportSuppliersCSV: () => ipcRenderer.invoke('export-suppliers-csv')
  , backupChooseDir: () => ipcRenderer.invoke('backup-choose-dir')
  , backupRunManual: () => ipcRenderer.invoke('backup-run-manual')
  , purchasesList: (filter) => ipcRenderer.invoke('purchases-list', filter)
  , purchaseAdd: (data) => ipcRenderer.invoke('purchase-add', data)
  , purchaseUpdate: (id,data) => ipcRenderer.invoke('purchase-update', id, data)
  , purchaseDelete: (id) => ipcRenderer.invoke('purchase-delete', id)
  , purchaseGet: (id) => ipcRenderer.invoke('purchase-get', id)
  , purchaseNext: () => ipcRenderer.invoke('purchase-next')
  , purchaseReturnCreate: (data) => ipcRenderer.invoke('purchase-return-create', data)
  , purchaseReturnsList: () => ipcRenderer.invoke('purchase-returns-list')
  , purchaseReturnStats: (purchaseId) => ipcRenderer.invoke('purchase-return-stats', purchaseId)
  , productSaveImage: (payload) => ipcRenderer.invoke('product-save-image', payload)
  , debtAdd: (data) => ipcRenderer.invoke('debt-add', data)
  , debtsList: (filter) => ipcRenderer.invoke('debts-list', filter)
  , debtDelete: (id) => ipcRenderer.invoke('debt-delete', id)
  , debtUpdate: (id,data) => ipcRenderer.invoke('debt-update', id, data)
  , debtCustomerUpdate: (id,data) => ipcRenderer.invoke('debt-customer-update', id, data)
  , debtPaymentAdd: (data) => ipcRenderer.invoke('debt-payment-add', data)
  , debtOperations: (customer_id) => ipcRenderer.invoke('debt-operations', customer_id)
  , debtReportRange: (payload) => ipcRenderer.invoke('debt-report-range', payload)
  , productStockMovements: (productId, limit) => ipcRenderer.invoke('product-stock-movements', productId, limit)
  , inventoryAdjust: (payload) => ipcRenderer.invoke('inventory-adjust', payload)
  , inventorySummary: () => ipcRenderer.invoke('inventory-summary')
  , reportInventoryValue: () => ipcRenderer.invoke('report-inventory-value')
  , reportStockMovements: (params) => ipcRenderer.invoke('report-stock-movements', params)
  , reportReturnsCombined: (params) => ipcRenderer.invoke('report-returns-combined', params)
  , reportDebtsAging: () => ipcRenderer.invoke('report-debts-aging')
  , reportExpenses: (params) => ipcRenderer.invoke('report-expenses', params)
  , expenseAdd: (data) => ipcRenderer.invoke('expense-add', data)
  , receiptsList: (params) => ipcRenderer.invoke('receipts-list', params)
  , receiptAdd: (data) => ipcRenderer.invoke('receipt-add', data)
  , receiptUpdate: (id,data) => ipcRenderer.invoke('receipt-update', id, data)
  , receiptDelete: (id) => ipcRenderer.invoke('receipt-delete', id)
  , receiptPdf: (id) => ipcRenderer.invoke('receipt-pdf', id)
  , receiptPrintHtml: (id) => ipcRenderer.invoke('receipt-print-html', id)
  , reportVat: (params) => ipcRenderer.invoke('report-vat', params)
  , reportProductMargins: (params) => ipcRenderer.invoke('report-product-margins', params)
  , customerReport: (payload) => ipcRenderer.invoke('customer-report', payload)
  , customerStatement: (params) => ipcRenderer.invoke('customer-statement', params)
  , customersSalesList: (filter) => ipcRenderer.invoke('customers-sales-list', filter)
  , customerReportPdf: (params) => ipcRenderer.invoke('customer-report-pdf', params)
  , customerStatementPdf: (params) => ipcRenderer.invoke('customer-statement-pdf', params)
  , customerReportPdfHtml: (params) => ipcRenderer.invoke('customer-report-pdf-html', params)
  , customerStatementPdfHtml: (params) => ipcRenderer.invoke('customer-statement-pdf-html', params)
  , saleInvoicePdfHtml: (params) => ipcRenderer.invoke('sale-invoice-pdf-html', params)
  , financeSummary: (period) => ipcRenderer.invoke('finance-summary', period)
  , appInfo: () => ipcRenderer.invoke('app-info')
  , settingSetMulti: (obj) => { if(!obj || typeof obj!=='object') return Promise.resolve({ok:false}); return Promise.all(Object.entries(obj).map(([k,v])=> ipcRenderer.invoke('setting-set', k, v))).then(()=>({ok:true})); }
    , openSalesChartsWindow: (period) => ipcRenderer.invoke('open-sales-charts-window', { period })
    , onChartsSetPeriod: (cb) => ipcRenderer.on('charts-set-period', (_ev, p)=> cb && cb(p))
  , exportData: () => ipcRenderer.invoke('exportData')
  , importData: () => ipcRenderer.invoke('importData')
  , listPrinters: () => ipcRenderer.invoke('printers-list')
  , directPrintInvoice: (html, options) => ipcRenderer.invoke('direct-print-invoice', { html, options })
  , printerDetectType: (name) => ipcRenderer.invoke('printer-detect-type', name)
  , generateQrSvg: (base64Data) => ipcRenderer.invoke('generate-qr-svg', base64Data)
  , invoiceQrGenerate: (params) => ipcRenderer.invoke('invoice-qr-generate', params)
  , exportReport: (params) => ipcRenderer.invoke('report-export', params)
  , structuredReportSave: (params) => ipcRenderer.invoke('structured-report-save', params)
  , companyPublicInfo: () => ipcRenderer.invoke('company-public-info')
});
